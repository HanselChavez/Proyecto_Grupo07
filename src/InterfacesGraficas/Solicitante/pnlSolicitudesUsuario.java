/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfacesGraficas.Solicitante;

import Entidades.HistorialSolicitudes;
import Entidades.Solicitud;
import Entidades.Usuario;
import static Main.ServicioDeAgua.mensaje;
import Utilidades.ServiciosUsuario;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import rojeru_san.efectos.ValoresEnum;

/**
 *
 * @author HanselChavez
 */
public class pnlSolicitudesUsuario extends javax.swing.JPanel {

    /**
     * Creates new form pnlSolicitudesUsuario
     */
    private ServiciosUsuario servicio ;  
    private int id;
    private Usuario user;
    private HistorialSolicitudes hSolicitudes;
    public pnlSolicitudesUsuario(){
        initComponents();   
        ocultarLabels();
        btnVolver.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlSliderSolicitud = new rojerusan.RSPanelEffect();
        pnlHSolicitud = new javax.swing.JPanel();
        lblestado = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaSolicitudes = new RSMaterialComponent.RSTableMetroCustom();
        txtBuscarsolicitud = new RSMaterialComponent.RSTextFieldMaterialIcon();
        btnEliminarHist = new RSMaterialComponent.RSButtonMaterialIconOne();
        btnNuevaSolicitud = new RSMaterialComponent.RSButtonMaterialIconOne();
        btnCancelarSol = new RSMaterialComponent.RSButtonMaterialIconOne();
        btnEditarSolicitud = new RSMaterialComponent.RSButtonMaterialIconOne();
        pnlNuevaSolicitud = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMotivo = new javax.swing.JTextArea();
        btnAceptarEditar = new RSMaterialComponent.RSButtonMaterialIconOne();
        lblmotivo = new javax.swing.JLabel();
        lblfecha = new rojeru_san.rsdate.RSLabelFecha();
        jLabel2 = new javax.swing.JLabel();
        txtdireccion = new javax.swing.JTextField();
        lblcod = new javax.swing.JLabel();
        lblcodigo = new javax.swing.JLabel();
        btnVolver = new RSMaterialComponent.RSButtonMaterialIconOne();

        setBackground(new java.awt.Color(255, 255, 255));

        pnlSliderSolicitud.setBackground(new java.awt.Color(255, 255, 255));
        pnlSliderSolicitud.setName("pnlSliderSolicitud"); // NOI18N

        pnlHSolicitud.setBackground(new java.awt.Color(255, 255, 255));
        pnlHSolicitud.setName("pnlHSolicitud"); // NOI18N

        lblestado.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        lblestado.setText("Historial de Solicitudes");

        jScrollPane1.setBorder(null);

        tablaSolicitudes.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tablaSolicitudes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, "", null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id Solicitud", "Motivo", "Fecha", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaSolicitudes.setBackgoundHead(new java.awt.Color(0, 108, 255));
        tablaSolicitudes.setBackgoundHover(new java.awt.Color(10, 94, 208));
        tablaSolicitudes.setColorPrimaryText(new java.awt.Color(0, 0, 0));
        tablaSolicitudes.setColorSecondary(new java.awt.Color(255, 255, 255));
        tablaSolicitudes.setColorSecundaryText(new java.awt.Color(0, 0, 0));
        tablaSolicitudes.setRowHeight(40);
        tablaSolicitudes.setSelectionBackground(new java.awt.Color(78, 85, 230));
        jScrollPane1.setViewportView(tablaSolicitudes);

        txtBuscarsolicitud.setForeground(new java.awt.Color(0, 108, 255));
        txtBuscarsolicitud.setColorIcon(new java.awt.Color(0, 108, 255));
        txtBuscarsolicitud.setColorMaterial(new java.awt.Color(0, 108, 255));
        txtBuscarsolicitud.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.SEARCH);
        txtBuscarsolicitud.setPhColor(new java.awt.Color(0, 69, 255));
        txtBuscarsolicitud.setPlaceholder("Buscar");
        txtBuscarsolicitud.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarsolicitudKeyReleased(evt);
            }
        });

        btnEliminarHist.setBackground(new java.awt.Color(204, 204, 204));
        btnEliminarHist.setText("Eliminar Historial");
        btnEliminarHist.setBackgroundHover(new java.awt.Color(225, 25, 25));
        btnEliminarHist.setForegroundIcon(new java.awt.Color(0, 0, 0));
        btnEliminarHist.setForegroundText(new java.awt.Color(0, 0, 0));
        btnEliminarHist.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnEliminarHist.setIconTextGap(29);
        btnEliminarHist.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.DELETE);
        btnEliminarHist.setPaddingLeft(15);
        btnEliminarHist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarHistActionPerformed(evt);
            }
        });

        btnNuevaSolicitud.setBackground(new java.awt.Color(204, 204, 204));
        btnNuevaSolicitud.setText("Nueva Solicitud");
        btnNuevaSolicitud.setBackgroundHover(new java.awt.Color(0, 108, 255));
        btnNuevaSolicitud.setForegroundIcon(new java.awt.Color(0, 0, 0));
        btnNuevaSolicitud.setForegroundText(new java.awt.Color(0, 0, 0));
        btnNuevaSolicitud.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnNuevaSolicitud.setIconTextGap(29);
        btnNuevaSolicitud.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.CREATE_NEW_FOLDER);
        btnNuevaSolicitud.setPaddingLeft(15);
        btnNuevaSolicitud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaSolicitudActionPerformed(evt);
            }
        });

        btnCancelarSol.setBackground(new java.awt.Color(204, 204, 204));
        btnCancelarSol.setText("Cancelar Solicitud");
        btnCancelarSol.setBackgroundHover(new java.awt.Color(225, 25, 25));
        btnCancelarSol.setForegroundIcon(new java.awt.Color(0, 0, 0));
        btnCancelarSol.setForegroundText(new java.awt.Color(0, 0, 0));
        btnCancelarSol.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnCancelarSol.setIconTextGap(1);
        btnCancelarSol.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.CANCEL);
        btnCancelarSol.setPaddingLeft(15);
        btnCancelarSol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarSolActionPerformed(evt);
            }
        });

        btnEditarSolicitud.setBackground(new java.awt.Color(204, 204, 204));
        btnEditarSolicitud.setText("Editar Solicitud");
        btnEditarSolicitud.setBackgroundHover(new java.awt.Color(0, 108, 255));
        btnEditarSolicitud.setForegroundIcon(new java.awt.Color(0, 0, 0));
        btnEditarSolicitud.setForegroundText(new java.awt.Color(0, 0, 0));
        btnEditarSolicitud.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnEditarSolicitud.setIconTextGap(29);
        btnEditarSolicitud.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.EDIT);
        btnEditarSolicitud.setPaddingLeft(15);
        btnEditarSolicitud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarSolicitudActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlHSolicitudLayout = new javax.swing.GroupLayout(pnlHSolicitud);
        pnlHSolicitud.setLayout(pnlHSolicitudLayout);
        pnlHSolicitudLayout.setHorizontalGroup(
            pnlHSolicitudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHSolicitudLayout.createSequentialGroup()
                .addGroup(pnlHSolicitudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlHSolicitudLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(pnlHSolicitudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlHSolicitudLayout.createSequentialGroup()
                                .addComponent(lblestado, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(209, 209, 209)
                                .addComponent(txtBuscarsolicitud, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlHSolicitudLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(pnlHSolicitudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEditarSolicitud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnNuevaSolicitud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlHSolicitudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEliminarHist, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancelarSol, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        pnlHSolicitudLayout.setVerticalGroup(
            pnlHSolicitudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHSolicitudLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHSolicitudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblestado, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBuscarsolicitud, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlHSolicitudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlHSolicitudLayout.createSequentialGroup()
                        .addComponent(btnNuevaSolicitud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditarSolicitud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlHSolicitudLayout.createSequentialGroup()
                        .addComponent(btnEliminarHist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancelarSol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pnlSliderSolicitud.add(pnlHSolicitud, "card2");

        pnlNuevaSolicitud.setBackground(new java.awt.Color(255, 255, 255));
        pnlNuevaSolicitud.setName("pnlNuevaSolicitud"); // NOI18N

        lblTitulo.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        lblTitulo.setText("Nueva Solicitud");

        txtMotivo.setColumns(20);
        txtMotivo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtMotivo.setLineWrap(true);
        txtMotivo.setRows(5);
        txtMotivo.setWrapStyleWord(true);
        txtMotivo.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        txtMotivo.setCaretColor(new java.awt.Color(153, 153, 153));
        txtMotivo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtMotivo.setSelectionColor(new java.awt.Color(204, 204, 204));
        jScrollPane2.setViewportView(txtMotivo);

        btnAceptarEditar.setBackground(new java.awt.Color(204, 204, 204));
        btnAceptarEditar.setText("Guardar");
        btnAceptarEditar.setBackgroundHover(new java.awt.Color(0, 153, 0));
        btnAceptarEditar.setForegroundIcon(new java.awt.Color(0, 0, 0));
        btnAceptarEditar.setForegroundText(new java.awt.Color(0, 0, 0));
        btnAceptarEditar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnAceptarEditar.setIconTextGap(29);
        btnAceptarEditar.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.SAVE);
        btnAceptarEditar.setPaddingLeft(15);
        btnAceptarEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarEditarActionPerformed(evt);
            }
        });

        lblmotivo.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblmotivo.setForeground(new java.awt.Color(0, 108, 255));
        lblmotivo.setText("Ingrese el motivo de la Solicitud");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 108, 255));
        jLabel2.setText("Ubicación");

        txtdireccion.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtdireccion.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 1)));
        txtdireccion.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtdireccion.setEnabled(false);

        lblcod.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblcod.setForeground(new java.awt.Color(0, 108, 255));
        lblcod.setText("Codigo de Solicitud :");

        lblcodigo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblcodigo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblcodigo.setText("cod");

        javax.swing.GroupLayout pnlNuevaSolicitudLayout = new javax.swing.GroupLayout(pnlNuevaSolicitud);
        pnlNuevaSolicitud.setLayout(pnlNuevaSolicitudLayout);
        pnlNuevaSolicitudLayout.setHorizontalGroup(
            pnlNuevaSolicitudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlNuevaSolicitudLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnAceptarEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(pnlNuevaSolicitudLayout.createSequentialGroup()
                .addGroup(pnlNuevaSolicitudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlNuevaSolicitudLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlNuevaSolicitudLayout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(pnlNuevaSolicitudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblfecha, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtdireccion)
                            .addComponent(jScrollPane2)
                            .addComponent(lblmotivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlNuevaSolicitudLayout.createSequentialGroup()
                                .addComponent(lblcod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(lblcodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(306, 306, 306)))))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        pnlNuevaSolicitudLayout.setVerticalGroup(
            pnlNuevaSolicitudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNuevaSolicitudLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(pnlNuevaSolicitudLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblcod)
                    .addComponent(lblcodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblmotivo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(txtdireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblfecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAceptarEditar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlSliderSolicitud.add(pnlNuevaSolicitud, "card3");

        btnVolver.setBackground(new java.awt.Color(204, 204, 204));
        btnVolver.setText("Volver");
        btnVolver.setBackgroundHover(new java.awt.Color(0, 108, 255));
        btnVolver.setForegroundIcon(new java.awt.Color(0, 0, 0));
        btnVolver.setForegroundText(new java.awt.Color(0, 0, 0));
        btnVolver.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnVolver.setIconTextGap(29);
        btnVolver.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.KEYBOARD_ARROW_LEFT);
        btnVolver.setPaddingLeft(15);
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlSliderSolicitud, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlSliderSolicitud, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtBuscarsolicitudKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarsolicitudKeyReleased
        String buscar = txtBuscarsolicitud.getText();       
        actualizarLista(buscar);       
    }//GEN-LAST:event_txtBuscarsolicitudKeyReleased

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        ocultarLabels();
        limpiarCampos();
        this.pnlSliderSolicitud.setPanelNormal(pnlHSolicitud);
        btnVolver.setVisible(false);
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnNuevaSolicitudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaSolicitudActionPerformed
        
        if(verificarHorario()){
            lblTitulo.setText("Nueva Solicitud");
            lblmotivo.setText("Ingrese movito de Solicitud.");
            btnAceptarEditar.setText("Aceptar");
            btnAceptarEditar.setIcons(ValoresEnum.ICONS.CHECK);
            btnVolver.setVisible(true);
            txtdireccion.setText(user.getDireccion());
            this.pnlSliderSolicitud.setPanelNormal(pnlNuevaSolicitud);  
        }  else{
            mensaje.cargarDatos("Nueva Solicitud","El horario para hacer"
                    + " solicitudes es de 8 am a 5 pm",1);
        }    
    }//GEN-LAST:event_btnNuevaSolicitudActionPerformed

    private void btnEditarSolicitudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarSolicitudActionPerformed
        lblTitulo.setText("Editar Solicitud");
        btnAceptarEditar.setText("Guardar");
        btnAceptarEditar.setIcons(ValoresEnum.ICONS.SAVE);
        lblmotivo.setText("Ingrese el nuevo motivo de Solicitud.");       
        int indice = tablaSolicitudes.getSelectedRow();
        Solicitud solicitud;
        if(indice!=-1){
            solicitud = hSolicitudes.getListaDeSolicitudes().get(indice);  
            if("Pendiente".equals(solicitud.getEstado().getNombre()))
            {
                llenarDatos(solicitud);               
                btnVolver.setVisible(true);
                this.pnlSliderSolicitud.setPanelNormal(pnlNuevaSolicitud);
            }
            else{                 
                mensaje.cargarDatos("Editar Solicitud",
                                "La solicitud ya ha sido "
                         + "procesada, no es posible modificarla.",1);
            }
        }else{
            mensaje.cargarDatos("Editar Solicitud",
                               "Seleccione una solicitud de la"
                   + " lista para editarla.",1);
        }           
    }//GEN-LAST:event_btnEditarSolicitudActionPerformed

   
    private void btnEliminarHistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarHistActionPerformed
        Thread t1 = null;        
        t1 = new Thread(() -> {
            if(hSolicitudes.getListaDeSolicitudes().size()>0){
                mensaje.cargarDatos("Confirmacion","¿Estas seguro de "
                        + "continuar?", 2);
                boolean respuesta = mensaje.getRespuesta();
                if (respuesta) {
                    try {
                        servicio.eliminarSolicitudesUsuario(user.getDni());
                        actualizarLista("");
                        Thread.sleep(500);
                        mensaje.cargarDatos("Eliminar Historial",
                                "El historial de solicitudes ha sido eliminado"
                                        + " correctamente",1);                                  
                    } catch (SQLException | InterruptedException ex) {
                        mensaje.cargarDatos("Error al eliminar Historial",
                                "No ha sido posible borrar el historial.",1);
                    }
                }
            }
            else{
                mensaje.cargarDatos("Eliminar Historial"
                        ,"El historial de solicitudes se encuentra vacio.", 1);
            }
        });
        
        t1.start();
    }//GEN-LAST:event_btnEliminarHistActionPerformed

    private void btnCancelarSolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarSolActionPerformed
        int indice = tablaSolicitudes.getSelectedRow();        
        Solicitud solicitud;        
        if(indice!= -1){
            solicitud = hSolicitudes.getListaDeSolicitudes().get(indice);
            if("Pendiente".equals(solicitud.getEstado().getNombre()))
            {
                try {
                    servicio.cancelarSolicitud(solicitud.getCodigo()
                            ,user.getDni());
                    actualizarLista("");
                    mensaje.cargarDatos("Cancelar Solicitud",
                            "Se canceló la solicitud N°"+solicitud.getCodigo()
                            ,1);                    
                } catch (SQLException ex) {                   
                    mensaje.cargarDatos("Error al cancelar Solicitud",
                            "No ha sido posible cancelar la solicitud.",1); 
                }                
            }
            else{
                mensaje.cargarDatos("Error al cancelar Solicitud",
                    "La solicitud ya ha sido procesada, no es posible"
                    + "cancelarla",1);                 
            }
        }
        else{
            mensaje.cargarDatos("Cancelar Solicitud",
                    "Seleccione un registro de la lista",1);          
        }
    }//GEN-LAST:event_btnCancelarSolActionPerformed

    private void btnAceptarEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarEditarActionPerformed
        try {
            if(btnAceptarEditar.getText().equals("Aceptar")){           
                if(validarCampo()){                                    
                    servicio.insertarSolicitud(txtMotivo.getText(),user.getDni(),id);
                    mensaje.cargarDatos("Generar Nueva Solicitud",
                    "La solicitud ha sido enviada correctamente.",1);    
                    btnVolver.doClick();
                    id++;
                }
                else
                    mensaje.cargarDatos("Generar Nueva Solicitud",
                    "Completa todos los campos.",1);  
            }
            else if(btnAceptarEditar.getText().equals("Guardar")){
                if(validarCampo()){
                    servicio.actualizarSolicitud(lblcodigo.getText(),
                            txtMotivo.getText(),user.getDni());
                    mensaje.cargarDatos("Editar Solicitud",
                    "La solicitud ha sido editada correctamente.",1);                      
                    btnVolver.doClick();
                    
                }else
                    mensaje.cargarDatos("Editar Solicitud",
                    "Completa todos los campos.",1);  
            }
            actualizarLista("");            
        } catch (SQLException ex) {
            mensaje.cargarDatos("Error al Guardar Solicitud",
                    "No ha sido posible guardar los cambios",1);  
        }
    }//GEN-LAST:event_btnAceptarEditarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private RSMaterialComponent.RSButtonMaterialIconOne btnAceptarEditar;
    private RSMaterialComponent.RSButtonMaterialIconOne btnCancelarSol;
    private RSMaterialComponent.RSButtonMaterialIconOne btnEditarSolicitud;
    private RSMaterialComponent.RSButtonMaterialIconOne btnEliminarHist;
    private RSMaterialComponent.RSButtonMaterialIconOne btnNuevaSolicitud;
    private RSMaterialComponent.RSButtonMaterialIconOne btnVolver;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblcod;
    private javax.swing.JLabel lblcodigo;
    private javax.swing.JLabel lblestado;
    private rojeru_san.rsdate.RSLabelFecha lblfecha;
    private javax.swing.JLabel lblmotivo;
    private javax.swing.JPanel pnlHSolicitud;
    private javax.swing.JPanel pnlNuevaSolicitud;
    private rojerusan.RSPanelEffect pnlSliderSolicitud;
    private RSMaterialComponent.RSTableMetroCustom tablaSolicitudes;
    private RSMaterialComponent.RSTextFieldMaterialIcon txtBuscarsolicitud;
    private javax.swing.JTextArea txtMotivo;
    private javax.swing.JTextField txtdireccion;
    // End of variables declaration//GEN-END:variables
    public void cargarValores(Usuario user,ServiciosUsuario servicio) {
        this.user = user;  
        this.servicio = servicio;
        hSolicitudes = new HistorialSolicitudes(user);
        actualizarLista("");  
        this.id = hSolicitudes.getListaDeSolicitudes().size()+1;

    } 
    private void ocultarLabels(){        
        lblcod.setVisible(false);
        lblcodigo.setVisible(false);
    }
    private void mostrarLabels(){
        lblcod.setVisible(true);
        lblcodigo.setVisible(true);
    }
    private void limpiarCampos(){        
        txtMotivo.setText("");
    }
    private void llenarDatos(Solicitud solicitud){
        mostrarLabels();
        lblcodigo.setText(solicitud.getCodigo());
        txtMotivo.setText(solicitud.getDescripcion());        
        txtdireccion.setText(user.getDireccion());
    }
    private boolean validarCampo(){
        return !"".equals(txtMotivo.getText());
    }

    private void actualizarLista(String buscar) { 
        try {
            
            hSolicitudes.setListaDeSolicitudes(new ArrayList<>());
            this.servicio.listarSolicitudes(tablaSolicitudes, "", ""   
                    , buscar,user.getDni(),hSolicitudes.getListaDeSolicitudes());
        } catch (SQLException ex) {
            mensaje.cargarDatos("Error al Actualizar Lista",
                "No ha sido posible cargar los registros.",1);        
        }
    }
    private static boolean verificarHorario() {
        int hora = new Date().getHours();
         System.out.println(hora);
        return hora >= 8 && hora <= 17;
    }
 
}
